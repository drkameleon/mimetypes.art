;===============================================
; Mimetypes.art
;
; Mimetype recognition package
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;===============================================

export module [
    ;---------------------------
    ; Private variables
    ;---------------------------

    mimetypes: #./"mimedb.art"

    ;---------------------------
    ; Public methods
    ;---------------------------

    mimetype: method.public [location :string][
        ;; description: « get mimetype(s) from given extension/filepath
        ;; options: [
        ;;      extensions: « get possible file extensions for given mimetype instead
        ;;      best: « get only best match for given path
        ;; ]
        ;; returns: :block
        ;; example: {
        ;;      mimetype "jpg"              ; => ["image/jpeg"]
        ;;      mimetype "somefile.jpg"     ; => ["image/jpeg"]
        ;;      mimetype "boom"             ; => []
        ;;      
        ;;      mimetype.extensions "image/jpeg"
        ;;      ; => ["jpe","jpeg","jpg"]
        ;; }
        extensions?: not? null? attr 'extensions
        best?: not? null? attr 'best

        extensions? ? [
            ret: []
            loop \mimetypes [k,v][
                if contains? v location ->
                    'ret ++ k
            ]
            return sort ret
        ][
            isPath: and? [contains? location "."]
                         [not? prefix? location "."]
            
            extension: isPath ? -> extract.extension location
                                -> location

            extension: replace extension "." ""

            ret: []
            ; This is a hack (since `try` drops a null onto the stack)
            z: try [ ret: \mimetypes\[extension] ]
            if and? [best?][positive? size ret] -> return last ret
            
            return ret           
        ]
    ]
]!

;---------------------------
; Testing
;---------------------------

if standalone? [
    inspect mimetype "jpg"
    inspect mimetype "somefile.jpg"
    inspect mimetype "boom"

    inspect mimetype.extensions "image/jpeg"
]